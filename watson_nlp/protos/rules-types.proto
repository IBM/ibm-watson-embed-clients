/* ***************************************************************** */

/*                                                                   */

/* IBM Confidential                                                  */

/* OCO Source Materials                                              */

/*                                                                   */

/* (C) Copyright IBM Corp. 2001, 2018                                */

/*                                                                   */

/* The source code for this program is not published or otherwise    */

/* divested of its trade secrets, irrespective of what has been      */

/* deposited with the U. S. Copyright Office                         */

/*                                                                   */

/* US Government Users Restricted Rights - Use, duplication or       */

/* disclosure restricted by GSA ADP Schedule Contract with IBM Corp. */

/*                                                                   */

/* ***************************************************************** */



syntax = "proto3";

package watson_core_data_model.nlp;

option go_package = "github.ibm.com/ai-foundation/watson_nlp_runtime_client/watson_core_data_model/nlp";

option java_package = "com.ibm.watson.runtime.nlp";

option java_multiple_files = true;

import "producer-types.proto";

import "text-primitive-types.proto";



/********************************************************************************

 * This file houses protobuf interface definitions for RBR output *

 *******************************************************************************/



message RulesPrediction {

    repeated View views                                  = 1; // (required) List of AQL View(s)

    watson_core_data_model.common.ProducerId producer_id = 2; // (optional) Block that produced this keywords prediction

}



message View {

    string name                      = 1; // (required) Name of AQL View

    repeated ViewProperty properties = 2; // (required) List of ViewProperty

}



message ViewProperty {

    map<string, ViewPropertyValue> aql_property = 1;  // (required) Map of key -> value AQL ViewProperty where

                                                   // key: name of attribute

                                                   // value: Value of attribute whose type can be

                                                   // :int, float, boolean, text (str), Span, None or

                                                   // :a list of all types above

}



message ViewPropertyValue {

    oneof value {

        string str_val  = 1;

        float float_val = 2;

        int32 int_val   = 3;

        bool bool_val   = 4;

        Span span_val   = 5;



        PropertyListValueStr list_str_val     = 6;

        PropertyListValueFloat list_float_val = 7;

        PropertyListValueInt list_int_val     = 8;

        PropertyListValueBool list_bool_val   = 9;

        PropertyListValueSpan list_span_val   = 10;

    }

}

message PropertyListValueStr {

    repeated string val = 1;

}

message PropertyListValueFloat {

    repeated float val = 1;

}

message PropertyListValueInt {

    repeated int32 val = 1;

}

message PropertyListValueBool {

    repeated bool val = 1;

}

message PropertyListValueSpan {

    repeated Span val = 1;

}
