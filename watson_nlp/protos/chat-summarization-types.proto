/* ***************************************************************** */

/*                                                                   */

/* IBM Confidential                                                  */

/* OCO Source Materials                                              */

/*                                                                   */

/* (C) Copyright IBM Corp. 2023                                      */

/*                                                                   */

/* The source code for this program is not published or otherwise    */

/* divested of its trade secrets, irrespective of what has been      */

/* deposited with the U. S. Copyright Office                         */

/*                                                                   */

/* US Government Users Restricted Rights - Use, duplication or       */

/* disclosure restricted by GSA ADP Schedule Contract with IBM Corp. */

/*                                                                   */

/* ***************************************************************** */



syntax = "proto3";

package watson_core_data_model.nlp;

option go_package = "github.ibm.com/ai-foundation/watson_nlp_runtime_client/watson_core_data_model/nlp";

option java_package = "com.ibm.watson.runtime.nlp";

option java_multiple_files = true;

import "producer-types.proto";



/**

 * A Summarization prediction generated from a chat document.

 */

message ChatSummarizationPrediction {

    repeated string summary = 1; // (required) list of summaries (in conversation, one for each type of speaker)

    watson_core_data_model.common.ProducerId producer_id = 2;

}



/**

 * The full set of speaker labels that can be used as identifiers

 */

 enum Speaker {

    UNSET    = 0; // Make explicit that the zero-value is unset

    CLIENT   = 1; // Client

    AGENT    = 2; // Agent

}



/**

 * A single conversation utterance.

 */

message ConversationUtterance {

    Speaker speaker = 1; // (required) Type of Speaker

    string utterance = 2; // (required) Conversational utterance

    string time = 3; // (optional) Time stamp of that utterance 

    int32 turn = 4; // (optional) Turn number of the utterance 

}



/**

 * A conversational input document needed for summarization.

 */

message ConversationInput {

    string conversation_id = 1; // (required) A unique ID for the conversation

    repeated ConversationUtterance conversation = 2; // (required) The conversation between speakers

}